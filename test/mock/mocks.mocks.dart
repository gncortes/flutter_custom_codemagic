// Mocks generated by Mockito 5.4.4 from annotations
// in custom_cicd/test/mock/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:custom_cicd/core/external/database/database_service.dart'
    as _i3;
import 'package:custom_cicd/directory_manager/data/datasource/directory_manager_datasource.dart'
    as _i5;
import 'package:custom_cicd/directory_manager/data/models/directory_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectoryModel_0 extends _i1.SmartFake
    implements _i2.DirectoryModel {
  _FakeDirectoryModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i3.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> insert(
    String? table,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            data,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<Map<String, dynamic>>> query(
    String? table, {
    String? where,
    List<dynamic>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<int> update(
    String? table,
    Map<String, dynamic>? data, {
    String? where,
    List<dynamic>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            data,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> delete(
    String? table, {
    String? where,
    List<dynamic>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DirectoryManagerDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectoryManagerDatasource extends _i1.Mock
    implements _i5.DirectoryManagerDatasource {
  MockDirectoryManagerDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.DirectoryModel>> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.DirectoryModel>>.value(<_i2.DirectoryModel>[]),
      ) as _i4.Future<List<_i2.DirectoryModel>>);

  @override
  _i4.Future<_i2.DirectoryModel> add(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i4.Future<_i2.DirectoryModel>.value(_FakeDirectoryModel_0(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.DirectoryModel>);
}
